import tkinter as tk
from tkinter import ttk
import matplotlib.pyplot as plt
import numpy as np

class BreakEvenApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Cálculo del Punto de Equilibrio")
        self.root.geometry("600x400")  # Tamaño de ventana más grande

        # Crear pestañas
        self.tab_control = ttk.Notebook(self.root)

        self.tab_calculo = ttk.Frame(self.tab_control)
        self.tab_grafica = ttk.Frame(self.tab_control)

        self.tab_control.add(self.tab_calculo, text='Cálculo')
        self.tab_control.add(self.tab_grafica, text='Gráfica')

        self.tab_control.pack(expand=1, fill='both')

        self.create_calculo_tab()
        self.create_grafica_tab()

    def create_calculo_tab(self):
        # Entradas de usuario
        ttk.Label(self.tab_calculo, text="Costos Fijos (Quetzales):").grid(column=0, row=0)
        self.fixed_costs = tk.DoubleVar()
        ttk.Entry(self.tab_calculo, textvariable=self.fixed_costs).grid(column=1, row=0)

        ttk.Label(self.tab_calculo, text="Precio de Venta (Quetzales):").grid(column=0, row=1)
        self.sale_price = tk.DoubleVar()
        ttk.Entry(self.tab_calculo, textvariable=self.sale_price).grid(column=1, row=1)

        ttk.Label(self.tab_calculo, text="Costo Variable por Unidad (Quetzales):").grid(column=0, row=2)
        self.variable_cost = tk.DoubleVar()
        ttk.Entry(self.tab_calculo, textvariable=self.variable_cost).grid(column=1, row=2)

        # Botón para calcular
        ttk.Button(self.tab_calculo, text="Calcular Punto de Equilibrio", command=self.calculate_breakeven).grid(column=0, row=3, columnspan=2)

        # Tabla de resultados
        self.create_results_table()

    def create_results_table(self):
        # Encabezados de la tabla
        self.headers = ["Conceptos", "Valores (Quetzales)"]
        self.results_table = ttk.Treeview(self.tab_calculo, columns=self.headers, show='headings')
        
        for header in self.headers:
            self.results_table.heading(header, text=header)
            self.results_table.column(header, anchor='center')

        # Insertar encabezados en la tabla
        self.results_table.insert("", "end", values=("Costos Fijos", 0))
        self.results_table.insert("", "end", values=("Precio de Venta", 0))
        self.results_table.insert("", "end", values=("Costo Variable", 0))
        self.results_table.insert("", "end", values=("Margen de Contribución", 0))
        self.results_table.insert("", "end", values=("Margen de Pérdida (%)", 0))
        self.results_table.insert("", "end", values=("Margen de Utilidad (%)", 0))

        self.results_table.grid(column=0, row=4, columnspan=2, pady=10)

    def create_grafica_tab(self):
        ttk.Button(self.tab_grafica, text="Mostrar Gráfica", command=self.plot_breakeven).pack(pady=20)

    def calculate_breakeven(self):
        fixed_costs = self.fixed_costs.get()
        sale_price = self.sale_price.get()
        variable_cost = self.variable_cost.get()

        if sale_price <= variable_cost:
            # Mostrar error si el precio de venta no es mayor que el costo variable
            for i in self.results_table.get_children():
                self.results_table.item(i, values=(self.results_table.item(i)['values'][0], 0))
            self.results_table.insert("", "end", values=("Error", "El precio de venta debe ser mayor que el costo variable."))
            return

        # Cálculo del punto de equilibrio en unidades y quetzales
        breakeven_units = fixed_costs / (sale_price - variable_cost)
        breakeven_quetzales = breakeven_units * sale_price

        # Calcular margen de contribución
        contribution_margin = sale_price - variable_cost
        contribution_margin_percentage = (contribution_margin / sale_price) * 100

        # Calcular margen de pérdida y utilidad
        loss_margin = fixed_costs / sale_price * 100
        profit_margin = (breakeven_units * contribution_margin) / breakeven_quetzales * 100 if breakeven_quetzales != 0 else 0

        # Actualizar la tabla con los resultados
        self.results_table.item(self.results_table.get_children()[0], values=("Costos Fijos", fixed_costs))
        self.results_table.item(self.results_table.get_children()[1], values=("Precio de Venta", sale_price))
        self.results_table.item(self.results_table.get_children()[2], values=("Costo Variable", variable_cost))
        self.results_table.item(self.results_table.get_children()[3], values=("Margen de Contribución", contribution_margin))
        self.results_table.item(self.results_table.get_children()[4], values=("Margen de Pérdida (%)", loss_margin))
        self.results_table.item(self.results_table.get_children()[5], values=("Margen de Utilidad (%)", profit_margin))

    def plot_breakeven(self):
        fixed_costs = self.fixed_costs.get()
        sale_price = self.sale_price.get()
        variable_cost = self.variable_cost.get()

        breakeven_units = fixed_costs / (sale_price - variable_cost)

        # Valores para la gráfica
        units = np.arange(0, breakeven_units * 2, 1)
        revenue = sale_price * units
        total_costs = fixed_costs + variable_cost * units
        variable_costs = variable_cost * units  # Costos variables
        fixed_costs_line = np.full_like(units, fixed_costs)  # Costos fijos

        plt.figure(figsize=(10, 6))
        plt.plot(units, revenue, label='Ingresos Totales', color='green')
        plt.plot(units, total_costs, label='Costos Totales', color='red')
        plt.plot(units, variable_costs, label='Costos Variables', color='orange')
        plt.plot(units, fixed_costs_line, label='Costos Fijos', color='blue', linestyle='--')
        plt.axvline(x=breakeven_units, color='black', linestyle='--', label='Punto de Equilibrio')
        plt.title('Gráfica del Punto de Equilibrio')
        plt.xlabel('Unidades')
        plt.ylabel('Quetzales')
        plt.legend()
        plt.grid()
        plt.show()

if __name__ == "__main__":
    root = tk.Tk()
    app = BreakEvenApp(root)
    root.mainloop()

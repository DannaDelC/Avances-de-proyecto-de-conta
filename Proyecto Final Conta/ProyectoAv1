import tkinter as tk
from tkinter import messagebox
import matplotlib
matplotlib.use("TkAgg")
import matplotlib.pyplot as plt

class PuntoEquilibrioApp:
    def __init__(self, master):
        self.master = master
        master.title("Calculadora de Punto de Equilibrio")

        self.costos_fijos = 0
        self.precio_unitario = 0
        self.costo_variable = 0

        self.step = 0

        self.label = tk.Label(master, text="Bienvenido a la Calculadora de Punto de Equilibrio", font=("Arial", 14))
        self.label.pack(pady=10)

        self.button_next = tk.Button(master, text="Comenzar", command=self.siguiente_paso, font=("Arial", 12))
        self.button_next.pack(pady=10)

        self.result_label = tk.Label(master, text="", font=("Arial", 12))
        self.result_label.pack(pady=10)

    def siguiente_paso(self):
        if self.step == 0:
            self.pedir_costos_fijos()
        elif self.step == 1:
            self.pedir_precio_unitario()
        elif self.step == 2:
            self.pedir_costo_variable()
        elif self.step == 3:
            self.calcular_y_graficar()

    def pedir_costos_fijos(self):
        self.clear_widgets()
        self.label.config(text="Ingrese los Costos Fijos (Quetzales):", font=("Arial", 14))
        self.entry = tk.Entry(self.master, font=("Arial", 12))
        self.entry.pack(pady=10)
        self.button_submit = tk.Button(self.master, text="Enviar", command=self.guardar_costos_fijos, font=("Arial", 12))
        self.button_submit.pack(pady=10)

    def guardar_costos_fijos(self):
        try:
            self.costos_fijos = float(self.entry.get())
            self.step += 1
            self.siguiente_paso()
        except ValueError:
            messagebox.showerror("Error", "Por favor, ingrese un valor numérico válido.")

    def pedir_precio_unitario(self):
        self.clear_widgets()
        self.label.config(text="Ingrese el Precio por Unidad (Quetzales):", font=("Arial", 14))
        self.entry = tk.Entry(self.master, font=("Arial", 12))
        self.entry.pack(pady=10)
        self.button_submit = tk.Button(self.master, text="Enviar", command=self.guardar_precio_unitario, font=("Arial", 12))
        self.button_submit.pack(pady=10)

    def guardar_precio_unitario(self):
        try:
            self.precio_unitario = float(self.entry.get())
            self.step += 1
            self.siguiente_paso()
        except ValueError:
            messagebox.showerror("Error", "Por favor, ingrese un valor numérico válido.")

    def pedir_costo_variable(self):
        self.clear_widgets()
        self.label.config(text="Ingrese el Costo Variable por Unidad (Quetzales):", font=("Arial", 14))
        self.entry = tk.Entry(self.master, font=("Arial", 12))
        self.entry.pack(pady=10)
        self.button_submit = tk.Button(self.master, text="Enviar", command=self.guardar_costo_variable, font=("Arial", 12))
        self.button_submit.pack(pady=10)

    def guardar_costo_variable(self):
        try:
            self.costo_variable = float(self.entry.get())
            self.step += 1
            self.siguiente_paso()
        except ValueError:
            messagebox.showerror("Error", "Por favor, ingrese un valor numérico válido.")

    def calcular_y_graficar(self):
        punto_equilibrio_unidades = self.costos_fijos / (self.precio_unitario - self.costo_variable)
        punto_equilibrio_quetzales = self.precio_unitario * punto_equilibrio_unidades
        
        self.result_label.config(text=f"Punto de Equilibrio:\nUnidades: {punto_equilibrio_unidades:.2f}\nQuetzales: {punto_equilibrio_quetzales:.2f}", font=("Arial", 12))

        self.graficar_punto_equilibrio()

    def graficar_punto_equilibrio(self):
        print("Generando la gráfica...")
        unidades = []
        ingresos = []
        costos = []

        for q in range(0, 500):  # Rango de cantidades
            unidades.append(q)
            ingresos.append(self.precio_unitario * q)
            costos.append(self.costos_fijos + self.costo_variable * q)

        plt.figure(figsize=(10, 6))
        plt.plot(unidades, ingresos, label='Ingresos', color='blue')
        plt.plot(unidades, costos, label='Costos', color='orange')
        plt.axvline(x=self.costos_fijos / (self.precio_unitario - self.costo_variable), color='red', linestyle='--', label='Punto de Equilibrio')
        plt.xlabel('Unidades Vendidas', fontsize=12)
        plt.ylabel('Quetzales', fontsize=12)
        plt.title('Análisis de Punto de Equilibrio', fontsize=14)
        plt.legend()
        plt.grid(True)
        plt.tight_layout()
        plt.savefig('punto_equilibrio.png')
        plt.show()

    def clear_widgets(self):
        for widget in self.master.winfo_children():
            widget.pack_forget()

if __name__ == "__main__":
    root = tk.Tk()
    root.geometry("400x300")  # Ajusta el tamaño de la ventana si es necesario
    app = PuntoEquilibrioApp(root)
    root.mainloop()
